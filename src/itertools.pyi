# Stubs for itertools (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

def tee(iterable, n=2): ...

class _grouper:
    def __init__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...

class _tee:
    def __init__(self, *args, **kwargs): ...
    def __copy__(self): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...
    def __setstate__(self, state): ...

class _tee_dataobject:
    def __init__(self, *args, **kwargs): ...
    def __reduce__(self): ...

class accumulate:
    def __init__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...
    def __setstate__(self, state): ...

class chain:
    def __init__(self, *args, **kwargs): ...
    @classmethod
    def from_iterable(cls, *args, **kwargs): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...
    def __setstate__(self, state): ...

class combinations:
    def __init__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...
    def __setstate__(self, state): ...
    def __sizeof__(self): ...

class combinations_with_replacement:
    def __init__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...
    def __setstate__(self, state): ...
    def __sizeof__(self): ...

class compress:
    def __init__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...

class count:
    def __init__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...

class cycle:
    def __init__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...
    def __setstate__(self, state): ...

class dropwhile:
    def __init__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...
    def __setstate__(self, state): ...

class filterfalse:
    def __init__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...

class groupby:
    def __init__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...
    def __setstate__(self, state): ...

class islice:
    def __init__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...
    def __setstate__(self, state): ...

class permutations:
    def __init__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...
    def __setstate__(self, state): ...
    def __sizeof__(self): ...

class product:
    def __init__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...
    def __setstate__(self, state): ...
    def __sizeof__(self): ...

class repeat:
    def __init__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __length_hint__(self, *args, **kwargs): ...
    def __next__(self): ...
    def __reduce__(self): ...

class starmap:
    def __init__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...

class takewhile:
    def __init__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...
    def __setstate__(self, state): ...

class zip_longest:
    def __init__(self, *args, **kwargs): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __reduce__(self): ...
    def __setstate__(self, state): ...
